Resumen de Cambios Realizados en el Proyecto

Se han implementado varias mejoras y funcionalidades en la entidad `salones` para alinearla con las mejores prácticas de desarrollo de API REST.

1.  **Validación de Datos con `express-validator`**
    *   Se instaló la dependencia `express-validator`.
    *   Se agregaron reglas de validación a las rutas de creación (POST) y actualización (PUT) de salones para los campos `titulo`, `direccion`, `capacidad` e `importe`.
    *   Se refactorizó el `salonesControlador` para procesar los resultados de la validación y eliminar la lógica de validación manual.

2.  **Paginado, Filtrado y Ordenación**
    *   Se modificó la consulta a la base de datos (`db/salones.js`) para que sea dinámica y acepte parámetros.
    *   Ahora el endpoint `GET /api/v1/salones` acepta los siguientes parámetros de consulta:
        *   `page`: Para la paginación.
        *   `limit`: Para definir cuántos resultados por página.
        *   `sortBy`: Para ordenar los resultados (por `salon_id`, `titulo`, `capacidad` o `importe`).
        *   `order`: Para la dirección de la ordenación (`ASC` o `DESC`).
        *   `capacidad`: Para filtrar por capacidad mínima.
        *   `importeMax`: Para filtrar por un importe máximo.

3.  **Sistema de Caché en Memoria**
    *   Se instaló la dependencia `memory-cache`.
    *   Se implementó una caché en el endpoint `GET /api/v1/salones` con una duración de 5 minutos para reducir la carga sobre la base de datos.
    *   La caché se limpia automáticamente al crear, actualizar o eliminar un salón para evitar datos desactualizados.
    *   La respuesta de la API ahora indica si el origen de los datos es la base de datos (`db`) o la caché (`cache`).

4.  **Documentación con Swagger**
    *   Se instalaron las dependencias `swagger-jsdoc` y `swagger-ui-express`.
    *   Se configuró un nuevo endpoint `/api-docs` que muestra una interfaz web interactiva con la documentación de toda la API de salones.
    *   Se documentaron todos los endpoints de salones (GET, POST, PUT, DELETE) detallando parámetros, cuerpos de solicitud y posibles respuestas.

---

5.  **Creación de Base de Datos y Datos de Ejemplo**
    *   Se generó el archivo `database.sql`, que contiene todas las sentencias `CREATE TABLE` para construir la estructura completa de la base de datos del proyecto, basándose en el modelo de datos del PDF.
    *   Se generó el archivo `datos_iniciales.sql` para poblar la base de datos con un juego completo de datos de prueba. Este archivo incluye:
        *   **Turnos**: 3 turnos de 3 horas cada uno, con una hora de descanso entre ellos.
        *   **Salones**: 5 salones temáticos con nombres de películas de Disney.
        *   **Usuarios**: 5 usuarios de tipo `cliente` (autores famosos) y 3 usuarios de tipo `empleado`/`administrador` (personajes de Star Wars).
        *   **Reservas**: 5 reservas iniciales, una para cada cliente, en fechas distintas.
        *   **Servicios**: 10 servicios adicionales que se pueden contratar (catering, decoración, etc.).
        *   **Asignación de Servicios**: Se asignaron 4 servicios diferentes a cada una de las 5 reservas.
        *   **Actualización de Costos**: Se actualizó el `importe_total` de cada reserva para reflejar el costo del salón más los servicios contratados.

---

6.  **Implementación de Endpoints para Usuarios**
    *   Se crearon los archivos `src/db/usuarios.js`, `src/servicios/usuariosServicio.js`, `src/controladores/usuariosControlador.js` y `src/v1/rutas/usuariosRutas.js`.
    *   Se implementaron las operaciones CRUD (Crear, Leer, Actualizar, Eliminar lógicamente) para la entidad `usuarios`.
    *   Se añadió la ruta `/api/v1/usuarios` en `src/app.js` para exponer los endpoints de usuarios.
    *   Se incluyeron validaciones básicas para la creación y actualización de usuarios.

7.  **Implementación de Endpoints para Servicios**
    *   Se crearon los archivos `src/db/servicios.js`, `src/servicios/serviciosServicio.js`, `src/controladores/serviciosControlador.js` y `src/v1/rutas/serviciosRutas.js`.
    *   Se implementaron las operaciones CRUD (Crear, Leer, Actualizar, Eliminar lógicamente) para la entidad `servicios`.
    *   Se añadió la ruta `/api/v1/servicios` en `src/app.js` para exponer los endpoints de servicios.
    *   Se incluyeron validaciones básicas para la creación y actualización de servicios.
8. **Se implementaron mejoras en la validación de datos y el manejo básico de errores en el backend del proyecto.**
    *   Cambios realizados
    *   Agregadas validaciones adicionales en los controladores de salones, usuarios y servicios utilizando express-validator.
    *   Incorporado un middleware de validaciones (validarInputs) para centralizar la verificación de errores y mantener los controladores más limpios.
    *   Implementada validación de tipo de datos y campos requeridos en cada entidad.
    *   Agregada validación de unicidad del campo nombre_usuario al crear nuevos usuarios.
    *   Ajustado el manejo de errores en los controladores para devolver códigos HTTP apropiados (400 o 500) según el tipo de fallo.
    *   Refactor menor en los métodos de servicios para coherencia con las nuevas validaciones.

    *   Resultado
    *   Los endpoints ahora validan correctamente los datos de entrada y devuelven errores más claros y descriptivos.
    *   El sistema mantiene compatibilidad con los endpoints existentes (/api/v1/salones, /usuarios, /servicios).
